const width = 80
const height = 40

vertices = [
  -1,-1,-1,-1,-1, 1,-1, 1,-1, -1, 1, 1, 1,-1,-1, 1,-1, 1, 1, 1,-1, 1, 1, 1
]
indices = [
  0, 1, 0, 4, 0, 2, 1, 3, 1, 5, 2, 3, 2, 6, 3, 7, 4, 5, 4, 6, 5, 7, 6, 7
]

ratio = 0.5 // font size y / x
xa = 0.1
ya = 0.02
za = 0.04
zoom = 20

buf = []
array_resize(buf, height)
for i = 0 to width - 1 {
  buf[i] = []
  array_resize(buf[i], width)
}

fn clear_buffer() {
  for i = 0 to height - 1 {
    array_fill(buf[i], 0)
  }
}

fn line(x0, y0, x1, y1, c) {
  dx = abs(x1 - x0)
  sx = x0 < x1 ? 1 : -1
  dy = -abs(y1 - y0)
  sy = y0 < y1 ? 1 : -1
  error = dx + dy
  while true {
    if (x0 >= 0) && (x0 < width) && (y0 >= 0) && (y0 < height)
      buf[y0][x0] = c
    e2 = 2 * error
    if e2 >= dy {
      if x0 == x1
        break
      error = error + dy
      x0 = x0 + sx
    }
    else
    if e2 <= dx {
      if y0 == y1
        break
      error = error + dx
      y0 = y0 + sy
    }
  }
}

fn draw_cube(c) {
  for p = 0 to 11 {
    sx = round(zoom * vertices[indices[p * 2] * 3]) + (width / 2)
    sy = round((zoom * vertices[indices[p * 2] * 3 + 1]) * ratio) + (height / 2)
    sx1 = round(zoom * vertices[indices[p * 2 + 1] * 3]) + (width / 2)
    sy1 = round((zoom * vertices[indices[p * 2 + 1] * 3 + 1]) * ratio) + (height / 2)
    line(sx, sy, sx1, sy1, c)
  }
}

fn calc() {
  for p = 0 to 7 {
    yt = vertices[p * 3 + 1] * cos(xa) - vertices[p * 3 + 2] * sin(xa)
    zt = vertices[p * 3 + 1] * sin(xa) + vertices[p * 3 + 2] * cos(xa)
    vertices[p * 3 + 1] = yt
    vertices[p * 3 + 2] = zt

    xt = vertices[p * 3] * cos(ya) - vertices[p * 3 + 2] * sin(ya)
    zt = vertices[p * 3] * sin(ya) + vertices[p * 3 + 2] * cos(ya)
    vertices[p * 3] = xt
    vertices[p * 3 + 2] = zt

    xt = vertices[p * 3] * cos(za) - vertices[p * 3 + 1] * sin(za)
    yt = vertices[p * 3] * sin(za) + vertices[p * 3 + 1] * cos(za)
    vertices[p * 3] = xt
    vertices[p * 3 + 1] = yt
  }
}

fn draw_screen() {
  write('\x1b[2J\x1b[H')
  s = ''
  for i = 0 to height - 1 {
    sline = buf[i]
    for j = 0 to width - 1 {
      if sline[j] != 0
        s += '#'
      else
        s += ' '
    }
    s += '\n'
  }
  write(s)
}

clear_buffer()
while true {
  draw_cube(0)
  calc()
  draw_cube(1)
  draw_screen()
  sleep(10)
  mem_gc() // Manually call gc to void irregular interrupt
}