// Since the language does not support "finally", we simulate it using try-catch
// block and wrap it to a function

fn try_finally(ftry, ffinally) {
  assert(kindof(ftry) == sevkFunction, 'ftry must be a function')
  assert(kindof(ffinally) == sevkFunction, 'ffinally must be a function')
  try {
    ftry()
    ffinally()
  } catch(e) {
    ffinally()
    throw e
  }
}

writeln('START PROGRAM')
a = 2
try {
  try_finally(
    fn() {
      writeln('START TRY')
      b = a / 0 // Trigger division by zero
      writeln('END TRY')
    },
    fn() {
      writeln('FINALLY will always be executed')
    }
  )
} catch(e) {
  writeln(e)
}
writeln('FINISH PROGRAM')